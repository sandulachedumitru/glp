openapi: "3.0.3"
info:
  title: "GLP Server API"
  description: |-
    Guitar Lesson Planner Server API
    
    Some useful links:
    - [The GLP Server repository](https://github.com/sandulachedumitru/glp)
  termsOfService: https://swagger.io/terms/
  contact:
    email: sandulachedumitru@hotmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0.0"
servers:
  - url: "https://localhost:8080"
tags:
  - name: student
    description: Everything about your Student
  - name: lesson
    description: Access to student's lessons
paths:
  /student:
    post:
      tags:
        - student
      summary: "CREATE new student"
      operationId: "createNewStudent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    get:
      tags:
        - student
      summary: "FIND all students"
      operationId: "findAllStudents"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    put:
      tags:
        - student
      summary: "UPDATE student"
      operationId: "updateStudent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelperUpdateStudent"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /student/id/{studentId}:
    get:
      tags:
        - student
      summary: "FIND student by ID"
      operationId: "findStudentById"
      parameters:
        - name: "studentId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    delete:
      tags:
        - student
      summary: "DELETE student by ID"
      operationId: "deleteStudentById"
      parameters:
        - name: "studentId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /student/email/{studentEmail}:
    get:
      tags:
        - student
      summary: "FIND student by email"
      operationId: "findStudentByEmail"
      parameters:
        - name: "studentEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    delete:
      tags:
        - student
      summary: "DELETE student by email"
      operationId: "deleteStudentByEmail"
      parameters:
        - name: "studentEmail"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /student/name:
    get:
      tags:
        - student
      summary: "FIND student by firstname and lastname"
      operationId: "findStudentByFirstNameAndLastName"
      parameters:
        - name: "studentFirstName"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "studentLastName"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    delete:
      tags:
        - student
      summary: "DELETE student by firstname and lastname"
      operationId: "deleteStudentByFirstNameAndLastName"
      parameters:
        - name: "studentFirstName"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "studentLastName"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /lesson:
    post:
      tags:
        - lesson
      summary: "CREATE new lesson"
      operationId: "createNewLesson"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LessonDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    get:
      tags:
        - lesson
      summary: "FIND all lessons"
      operationId: "findAllLessons"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    put:
      tags:
        - lesson
      summary: "UPDATE lesson"
      operationId: "updateLesson"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelperLessonUpdate"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /lesson/student/{studentId}:
    get:
      tags:
        - lesson
      summary: "FIND lessons by student ID"
      operationId: "findLessonsByStudentId"
      parameters:
        - name: "studentId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /lesson/id/{lessonId}:
    get:
      tags:
        - lesson
      summary: "FIND lesson by ID"
      operationId: "findLessonById"
      parameters:
        - name: "lessonId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    delete:
      tags:
        - lesson
      summary: "DELETE lesson by ID"
      operationId: "deleteLessonById"
      parameters:
        - name: "lessonId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /lesson/student-and-lessonNumber:
    get:
      tags:
        - lesson
      summary: "FIND lesson by student and lesson number"
      operationId: "findLessonByStudentAndLessonNumber"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelperStudentAndLessonNumber"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /lesson/student-firstName-lastName-and-lessonNumber:
    get:
      tags:
        - lesson
      summary: "FIND lesson by student firstname and lastname and lesson number"
      operationId: "findLessonByStudentFirstNameAndStudentLastNameAndLessonNumber"
      parameters:
        - name: "studentFirstName"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "studentLastName"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "lessonNumber"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /lesson/student-id-and-lessonNumber:
    get:
      tags:
        - lesson
      summary: "FIND lesson by student ID and lesson number"
      operationId: "findLessonByStudentIdAndLessonNumber"
      parameters:
        - name: "studentId"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "lessonNumber"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /lesson/student-email-and-lessonNumber:
    get:
      tags:
        - lesson
      summary: "FIND lesson by student email and lesson number"
      operationId: "findLessonByStudentEmailAndLessonNumber"
      parameters:
        - name: "studentEmail"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "lessonNumber"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
components:
  schemas:
    StudentDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        createdAt:
          type: "string"
          format: "date"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
    LessonDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        student:
          $ref: "#/components/schemas/StudentDto"
        lessonNumber:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date"
        content:
          type: "string"
        homework:
          type: "string"
    HttpHeaders:
      type: "object"
      properties: { }
    ResponseEntity:
      type: "object"
      properties:
        headers:
          $ref: "#/components/schemas/HttpHeaders"
    HelperStudentAndLessonNumber:
      type: "object"
      properties:
        lessonNumber:
          type: "integer"
          format: "int32"
        student:
          $ref: "#/components/schemas/StudentDto"
    HelperLessonUpdate:
      type: "object"
      properties:
        fromLessonDto:
          $ref: "#/components/schemas/LessonDto"
        toLessonDto:
          $ref: "#/components/schemas/LessonDto"
    HelperUpdateStudent:
      type: "object"
      properties:
        fromStudentDto:
          $ref: "#/components/schemas/StudentDto"
        toStudentDto:
          $ref: "#/components/schemas/StudentDto"
